{"version":3,"sources":["Keypad.js","Display.js","App.js","serviceWorker.js","index.js"],"names":["Keypad","handleKey","CreateButton","id","name","className","onClick","style","fontSize","height","rowSpan","colSpan","Display","calc","result","setCalc","setResult","keys","one","two","three","four","five","six","seven","eight","nine","zero","add","subtract","multiply","divide","decimal","numbers","App","useState","handleEquals","format","evaluate","precision","console","log","test","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ee8a283.chunk.js","sourcesContent":["import React from \"react\";\n// import { Button } from \"react-bootstrap\";\nimport \"./Keypad.css\";\n\nconst Keypad = ({ handleKey }) => {\n  const CreateButton = ({ id, name }) => {\n    return (\n      <button id={id} className=\"keypad\" onClick={() => handleKey(id, name)}>\n        {name}\n      </button>\n    );\n  };\n\n  return (\n    <>\n      <table>\n        <tbody>\n          <tr>\n            <td className=\"btn-dark-grey\" style={{ fontSize: \"90%\" }}>\n              <CreateButton id=\"clear\" name=\"AC\" />\n            </td>\n            <td className=\"btn-dark-grey\">\n              <CreateButton id=\"percent\" name=\"%\" />\n            </td>\n            <td className=\"btn-dark-grey\">\n              <CreateButton id=\"divide\" name=\"รท\" />\n            </td>\n            <td className=\"btn-dark-grey\">\n              <CreateButton id=\"multiply\" name=\"ร\" />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"seven\" name=\"7\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"eight\" name=\"8\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"nine\" name=\"9\" />\n            </td>\n            <td className=\"btn-orange\">\n              <CreateButton id=\"subtract\" name=\"-\" />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"four\" name=\"4\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"five\" name=\"5\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"six\" name=\"6\" />\n            </td>\n            <td className=\"btn-orange\">\n              <CreateButton id=\"add\" name=\"+\" />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"one\" name=\"1\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"two\" name=\"2\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"three\" name=\"3\" />\n            </td>\n            <td style={{ height: \"120px\" }} rowSpan=\"2\" className=\"btn-orange\">\n              <CreateButton id=\"equals\" name=\"=\" />\n            </td>\n          </tr>\n          <tr>\n            <td colSpan=\"2\" className=\"btn-light-grey\">\n              <CreateButton id=\"zero\" name=\"0\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"decimal\" name=\".\" />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Keypad;\n","import React from \"react\";\n// import { evaluate, format } from \"mathjs\";\nimport \"./Display.css\";\n\nconst Display = ({ calc, setCalc, result, setResult }) => {\n  // const [calc, setCalc] = useState(\"0\");\n  // const [result, setResult] = useState(0);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setResult(calc);\n  };\n\n  return (\n    <div>\n      {/* <form id=\"calcForm\" onSubmit={handleSubmit}>\n        <input\n          className=\"input-display\"\n          type=\"text\"\n          value={calc}\n          onChange={(e) => setCalc(e.target.value)}\n        />\n      </form> */}\n      <p>{calc}</p>\n      <p id=\"display\">{result}</p>\n      {/* <p>{format(evaluate(result), { precision: 14 })}</p> */}\n    </div>\n  );\n};\n\nexport default Display;\n","import React, { useState } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Keypad from \"./Keypad\";\nimport Display from \"./Display\";\nimport { evaluate, format } from \"mathjs\";\n\nconst keys = {\n  one: 1,\n  two: 2,\n  three: 3,\n  four: 4,\n  five: 5,\n  six: 6,\n  seven: 7,\n  eight: 8,\n  nine: 9,\n  zero: 0,\n  add: `+`,\n  subtract: `-`,\n  multiply: `*`,\n  divide: `/`,\n  decimal: `.`,\n};\n\nconst numbers = /\\d|./;\n\nconst App = () => {\n  const [calc, setCalc] = useState(\"0\");\n  const [result, setResult] = useState(0);\n\n  const handleKey = (id, name) => {\n    console.log(`Clicking key id=${id} name=${name}`);\n    if (id === \"clear\") {\n      console.log(`Clear!`);\n      setCalc(\"0\");\n      setResult(\"0\");\n    } else if (id === \"equals\") {\n      console.log(`Equals =`);\n      handleEquals();\n    } else if (id === \"percent\") {\n      console.log(`not yet available`);\n    } else {\n      if (calc === \"0\") {\n        setCalc(keys[id]);\n        setResult(name);\n      } else {\n        if (numbers.test(name)) {\n          if (numbers.test(result)) {\n            setResult(result.toString() + name.toString());\n          } else {\n            setResult(name.toString());\n          }\n          setCalc(calc.toString() + keys[id].toString());\n        } else {\n          setResult(name);\n          setCalc(calc.toString() + keys[id].toString());\n        }\n      }\n    }\n  };\n\n  const handleEquals = () => {\n    setResult(format(evaluate(calc), { precision: 14 }));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"Display\">\n        <Display\n          calc={calc}\n          setCalc={setCalc}\n          result={result}\n          setResult={setResult}\n          // handleEquals={handleEquals}\n        />\n      </div>\n      <div className=\"Keypad\">\n        <Keypad handleKey={handleKey} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}