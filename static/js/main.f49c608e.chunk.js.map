{"version":3,"sources":["Keypad.js","App.js","serviceWorker.js","index.js"],"names":["Keypad","handleKey","keys","CreateButton","id","className","onClick","style","fontSize","height","rowSpan","colSpan","one","two","three","four","five","six","seven","eight","nine","zero","decimal","add","subtract","multiply","divide","equals","clear","backspace","App","useState","calc","setCalc","result","setResult","prevType","setPrevType","handleNumber","keySym","handleDot","handleOper","keyName","handleClear","handleEqual","format","evaluate","precision","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f49c608e.chunk.js","sourcesContent":["import React from \"react\";\n// import { Button } from \"react-bootstrap\";\nimport \"./Keypad.css\";\n\nconst Keypad = ({ handleKey, keys }) => {\n  const CreateButton = ({ id }) => {\n    return (\n      <button id={id} className=\"keypad\" onClick={() => handleKey(id)}>\n        {keys[id][1]}\n      </button>\n    );\n  };\n\n  return (\n    <>\n      <table>\n        <tbody>\n          <tr>\n            <td className=\"btn-dark-grey\" style={{ fontSize: \"90%\" }}>\n              <CreateButton id=\"clear\" />\n            </td>\n            <td className=\"btn-dark-grey\" style={{ fontSize: \"90%\" }}>\n              <CreateButton id=\"backspace\" />\n            </td>\n            <td className=\"btn-dark-grey\">\n              <CreateButton id=\"divide\" />\n            </td>\n            <td className=\"btn-dark-grey\">\n              <CreateButton id=\"multiply\" />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"seven\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"eight\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"nine\" />\n            </td>\n            <td className=\"btn-orange\">\n              <CreateButton id=\"subtract\" />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"four\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"five\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"six\" />\n            </td>\n            <td className=\"btn-orange\">\n              <CreateButton id=\"add\" />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"one\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"two\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"three\" />\n            </td>\n            <td style={{ height: \"120px\" }} rowSpan=\"2\" className=\"btn-orange\">\n              <CreateButton id=\"equals\" />\n            </td>\n          </tr>\n          <tr>\n            <td colSpan=\"2\" className=\"btn-light-grey\">\n              <CreateButton id=\"zero\" />\n            </td>\n            <td className=\"btn-light-grey\">\n              <CreateButton id=\"decimal\" />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Keypad;\n","import React, { useState } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Keypad from \"./Keypad\";\n// import Display from \"./Display\";\nimport { evaluate, format } from \"mathjs\";\n\nconst keys = {\n  one: [`1`, \"1\", \"num\"],\n  two: [`2`, \"2\", \"num\"],\n  three: [`3`, \"3\", \"num\"],\n  four: [`4`, \"4\", \"num\"],\n  five: [`5`, \"5\", \"num\"],\n  six: [`6`, \"6\", \"num\"],\n  seven: [`7`, \"7\", \"num\"],\n  eight: [`8`, \"8\", \"num\"],\n  nine: [`9`, \"9\", \"num\"],\n  zero: [`0`, \"0\", \"num\"],\n\n  decimal: [`.`, \".\", \"dot\"],\n\n  add: [`+`, \"+\", \"oper\"],\n  subtract: [`-`, \"–\", \"oper\"],\n  multiply: [`*`, \"×\", \"oper\"],\n  divide: [`/`, \"÷\", \"oper\"],\n\n  equals: [`=`, \"=\", \"equal\"],\n\n  clear: [`ac`, \"AC\", \"clear\"],\n  backspace: [`bksp`, \"⌫\", \"bksp\"],\n};\n\nconst App = () => {\n  const [calc, setCalc] = useState(\"0\");\n  const [result, setResult] = useState(\"0\");\n  const [prevType, setPrevType] = useState(\"clear\");\n\n  const handleKey = (id) => {\n    const keyType = keys[id][2];\n    switch (keyType) {\n      case \"num\":\n        handleNumber(id);\n        break;\n      case \"oper\":\n        handleOper(id);\n        break;\n      case \"dot\":\n        handleDot();\n        break;\n      case \"equal\":\n        handleEqual();\n        break;\n      case \"clear\":\n        handleClear();\n      default:\n        break;\n    }\n  };\n\n  const handleNumber = (id) => {\n    const keySym = keys[id][0];\n    if (prevType === \"num\" || prevType === \"dot\") {\n      if (result[0] === \"0\" && result[1] !== \".\") {\n        setCalc(keySym);\n        setResult(keySym);\n      } else {\n        setCalc(calc + keySym);\n        setResult(result + keySym);\n      }\n    } else if (prevType === \"clear\" || prevType === \"equal\") {\n      setCalc(keySym);\n      setResult(keySym);\n    } else if (prevType === \"oper\") {\n      setCalc(calc + keySym);\n      setResult(keySym);\n    }\n    setPrevType(\"num\");\n  };\n\n  const handleDot = () => {\n    setCalc(calc + \".\");\n    setResult(result + \".\");\n    setPrevType(\"dot\");\n  };\n\n  const handleOper = (id) => {\n    const keySym = keys[id][0];\n    const keyName = keys[id][1];\n    if (prevType === \"equal\") {\n      setCalc(result + keySym);\n      setResult(result + keyName);\n    } else {\n      setCalc(calc + keySym);\n      setResult(result + keyName);\n    }\n    setPrevType(\"oper\");\n  };\n\n  const handleClear = () => {\n    setCalc(\"0\");\n    setResult(\"0\");\n    setPrevType(\"clear\");\n  };\n  const handleEqual = () => {\n    setCalc(\"'\");\n    setResult(format(evaluate(calc), { precision: 14 }));\n    setPrevType(\"equal\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"formula\">{calc}</div>\n      <div id=\"display\">{result}</div>\n      {/* <Display\n        calc={calc}\n        setCalc={setCalc}\n        result={result}\n        setResult={setResult}\n        className=\"Display\"\n        // handleEquals={handleEquals}\n      /> */}\n      <Keypad handleKey={handleKey} keys={keys} className=\"Keypad\" />\n      {/* <p>{`calc: ${calc} Result: ${result}`}</p> */}\n      {/* <p>{`Equal pressed? ${equalPressed}`}</p> */}\n      {/* <p>{prevType}</p> */}\n      <p style={{ fontSize: \"60%\", backgroundColor: \"white\" }}>by LazaroFilm</p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}